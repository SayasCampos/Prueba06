<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Rustio</title>
    <style>
        body {
            background-image: url(img/background/gradient-42.jpg);
        }
    </style>
    <meta name="description" content="A media player powered by Rust.">
    <meta name="author" content="Christopher Teters, Max Smiley, Paul Hubbard">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="vendor/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome CSS-->
    <link rel="stylesheet" href="vendor/font-awesome/css/all.css">
    <!-- owl carousel-->
    <link rel="stylesheet" href="vendor/owl.carousel/assets/owl.carousel.css">
    <link rel="stylesheet" href="vendor/owl.carousel/assets/owl.theme.default.css">
    <!-- animate.css-->
    <link rel="stylesheet" href="vendor/animate.css/animate.css">
    <!-- stylesheet-->
    <link rel="stylesheet" href="css/style.css">
</head>

<body>
    <!-- Reference item-->
    <!-- navbar-->
    <header class="header">
        <nav class="navbar navbar-expand-lg fixed-top">
            <div class="container">
                <a href="#intro" class="navbar-brand scrollTo">Rustio</a>
                <button type="button" data-toggle="collapse" data-target="#navbarcollapse" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler navbar-toggler-right"><span class="fa fa-bars"></span></button>
                <div id="navbarcollapse" class="collapse navbar-collapse">
                    <ul class="navbar-nav ml-auto">
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <section id="sample">
        <div class="row">
            <div class="col-sm-3">
                <br>
                <br>
                <br>
                <br>
		<div size="24" data-animate="fadeInUp">'
                    <big><font color="grey"><strong>Available Songs</strong></font></big>
                </div>

                <ul id="avail_songs" class="list-group">
                </ul>



            </div>
            <div class="col-sm-6">
                <img id="album_art" src="img/album/cd-cover-blank.png" align="bottom" alt="Album art" width="500" height="500" />
                <br>
                <br>
                <div size="24" data-animate="fadeInUp">'
                    <big><font id="song_info" color="white"><strong>Song info</strong></font></big>
                </div>

		<br>
                <button id="load_songs" class="btn btn-secondary btn-sm" type="submit" value="play_victory" style="width=2em">
                    load songs</button>
                </br>

                <br>
                <div class="btn-group mr-4" role="group" aria-label="Player">
                    <button id="pause" class="btn btn-secondary btn-lg">
                        <i class="fa fa-pause"></i>
                    </button>
                    </form>
                    <button id="play" class="btn btn-secondary btn-lg" type="submit">
                        <i class="fa fa-play"></i>
                    </button>
                    <button id="stop" class="btn btn-secondary btn-lg">
                        <i class="fa fa-stop"></i>
                    </button>

                    <button id="fullscreen" class="btn btn-secondary btn-lg" type="submit" onclick="requestFullScreen()">
                        <i class="fa fa-expand"></i>
                    </button>

                    <button id="home-screen" class="btn btn-secondary btn-lg" type="submit" onclick="relocate_settings()">
                        <div class="icon"><span style="font-size: 3em; color: LightBlue;"><i class="fas fa-bars"></i></span></div>
                        <h3 data-animate="fadeInUp" class="heading mb-3 text-400"></h3>
                    </button>
            <button id="home-screen" class="btn btn-secondary btn-lg" type="submit" onclick="relocate_home()">
                <div class="icon"><span style="font-size: 3em; color: LightBlue;"><i class="fas fa-home"></i></span></div>
                <h3 data-animate="fadeInUp" class="heading mb-3 text-400"></h3>
            </button>
                </div>

            </div>
            <div class="col-sm-3">
                <br>
                <br>
                <br>
                <br>

                <ul class="list-group">
                </ul>
            </div>
        </div>
    </section>

    <!-- JavaScript files-->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="vendor/owl.carousel/owl.carousel.min.js"></script>
    <script src="vendor/waypoints/lib/jquery.waypoints.min.js"></script>
    <script src="js/front.js"></script>
    <script src="js/fullscreen.js"></script>
    <script>
        function relocate_home() {
            location.href = "index.html.tera";
        }
    </script>
    <script>
        function relocate_settings() {
            location.href = "settings.html.tera";
        }
    </script>
    <script>
	var timeOut; 				//this is set to pause and play the visuals 	
					       //for an album
	var startTime = 0;			//this is the time that you pressed play 
	var wasPaused = 0;
        var tracks = [];		        //this holds all of the track structs 
        var track_struct;			//this holds a single track struct
        var url = '/';
        var i = 0;				//this is a counter for the song art delay
        var timeDelay = 0;			//this is the time delay in milliseconds
	var currentTrack = 0;			//holds the position of the current track
	//urls for the posts
        const getUrl = "/get_songs";		
        const stopUrl = "/stop";
        const playUrl = "/play";

        var song_list = $("#avail_songs");

	////////////////////////////////////////////////
	//post_songs
	// 	This function takes a song title and 
	// 	sends it to the back end rust program to 
	// 	be added to the list of songs to play 
	//	Parameters: 
	// 		song_title: This is the title 
	//                          the song you wish
	//			    to hear. 
	// Function Author: Paul Hubbard
	////////////////////////////////////////////////
        function post_song(song_title) {
            url += song_title;
            $.post(url, function(track_struct, status) {
                console.log(`${track_struct} and status is ${status}`)
            });

            url = '/';
        }

	///////////////////////////////////////////////
	//empty_track_list:
	// 	This clears the tracks array, that holds 
	// 	all of the Track structs that you wish
	// 	to hear. 
	// Function Author: Paul Hubbard 
	///////////////////////////////////////////////
        function empty_track_list() {
            tracks = [];
        }

	//////////////////////////////////////////////
	//my_loop
	//	This function is used to load the appropriate
	//	album info while the tracks are being 
	// 	played. 
	// 	Parameters: 
	//		time: This is the amount of time
	//		      in seconds, which then 
	// 		      gets converted to milliseconds,
	//		      that you need the album info 
	// 		      to stay on the screen. 
	// Function Author: Paul Hubbard
	//////////////////////////////////////////////
        function my_loop(time) {
	    window.clearTimeout(timeOut);
            timeOut = setTimeout(function() {
                $("#song_info").text(tracks[i].title + ' by ' + tracks[i].artist);
		new_cover = tracks[i].cover.replace("static/", "");
		console.log(new_cover);
		$("#album_art").attr("src", new_cover);
                console.log(tracks[i]);
		currentTrack = i;
                if (i < tracks.length && wasPaused == 0) {
		    console.log("wasPaused: " + wasPaused + " " + "time delay: " + ((timeDelay/1000)/60));
                    timeDelay = tracks[i].duration.secs * 1000;

                    my_loop(timeDelay);
                }
		//this is the case that the user pressed pause
		else if(i < tracks.length && wasPaused > 0){
		    console.log("wasPaused: " + wasPaused + " " + "time delay: " + ((timeDelay/1000)/60));
			wasPaused = 0;
			startTime = 0;
			my_loop(timeDelay);
		}
		else{
			//Send the stop at the end
			//to clear the playlist 
			//of any extra garbage
			$.post(stopUrl, function(status) {
			    console.log(`status is ${status}`)
			});
		}

            }, time)
		i++;
        }

	////////////////////////////////////////////////
	//postTracks:
	//	This posts the list of Track structs
	// 	that you wish to play as a JSON object
	//	to the back end for processing.
	// Function Author: Paul Hubbard
	///////////////////////////////////////////////
        function postTracks() {
            $.ajax({
                url: '/load_songs',
                type: 'POST',
                data: JSON.stringify(track_struct),
                dataType: 'json',
                contentType: 'application/json'
            });
        }

	///////////////////////////////////////////////
	//get_tracks:
	//	This gets all of the available tracks
	//	the rust backend. The tracks are passed
	//	to the front end as a JSON object that 
	// 	holds an array of track structs. 
	// Function Author: Paul Hubbard
	///////////////////////////////////////////////
        function get_tracks() {
            empty_track_list();
            song_list.empty();
            $.getJSON(getUrl, function(result) {

                $('.list-group-item').remove();
                track_struct = result;
                tracks = result.track_list;
                $.each(tracks, function(i) {
                    console.log(result);
                    var li = $('<li/>')
                        .addClass("list-group-item")
                        .attr('role', 'groupitme')
                        .text(tracks[i].title)
                        .appendTo(song_list);
                    var span = $('<span/>')
                        .addClass('badge')
                        .text(' by ' + tracks[i].artist)
                        .appendTo(li);
                });
		i = 0;
            });
        }

	///////////////////////////////////////////////
	//When the button that has the id "load_songs"
	//gets pressed, the postTracks function sends
	//the playlist to the rust backend.
	// Function Author: Paul Hubbard
	///////////////////////////////////////////////
        $('#load_songs').click(function() {
            postTracks();
        })

	//////////////////////////////////////////////
	//When the button that has the id "play"
	//gets pressed, this function calls 
	//the play funcitonality on the rust backend
	// Function Author: Paul Hubbard
	//////////////////////////////////////////////
        $('#play').click(function() {
		/*
	    var myDate = new Date();
	    console.log("wasPaused: " + wasPaused);
	    startTime = myDate.getTime();
		*/
            for (j = 0; j < tracks.length / 2; j++) {
                $.post(playUrl, function(status) {
                    console.log(`status is ${status}`)
                });
            }
            my_loop(0);
            i = 0;
        })
	
	//////////////////////////////////////////////
	//When the button that has the id "pause"
	//this calls the pause functionality 
	//in the rust backend
	// Function Author: Paul Hubbard
	//////////////////////////////////////////////
        $('#pause').click(function() {
		//this functionality was put in place to try
		//and update the album info timer after a pause
		//but I couldn't quite get it working.
		//the same goes with the wasPaused functionality
		//in the "#play" function.
		/*
		wasPaused = 1;
	    	console.log("wasPaused from pause: " + wasPaused);
	        console.log(tracks[currentTrack].duration.secs / 60);
		clearTimeout(timeOut);
		var newDate = new Date();
		timeDelay = (tracks[currentTrack].duration.secs * 1000) - (newDate.getTime() - startTime);
		
	*/
            for (i = 0; i < tracks.length / 2; i++) {
                $.post("/pause", function(status) {
                    console.log(`status is ${status}`)
                });
            }
        })

	//////////////////////////////////////////////
	//When the button that has the id "stop"
	//this calls the stop functionality 
	//in the rust backend
	// Function Author: Paul Hubbard
	//////////////////////////////////////////////
        $('#stop').click(function() {
		$("#song_info").text("Song Info");
		$("#album_art").attr("src", "img/album/cd-cover-blank.png");
		clearTimeout(timeOut);
            for (i = 0; i < tracks.length / 2; i++) {
                $.post(stopUrl, function(status) {
                    console.log(`status is ${status}`)
                });
            }
            i = 0;
        })

	//Gets the tracks from the backend
	//Funciton Author: Paul Hubbard
        $('#get_songs').click(get_tracks())

        //load the songs as soon as the page loads
        window.onload = get_tracks;

	//stop the music if the window is refreshed or 
	//the user exits
	// Function Author: Paul Hubbard
	window.onbeforeunload = function(e){
		e.preventDefault();

		for (i = 0; i < tracks.length / 2; i++) {
                $.post(stopUrl, function(status) {
                    console.log(`status is ${status}`)
                });
            }

		e.returnValue = ''; //google needs a return value
				    //thats why this is blank
	}

    </script>

</body>

</html>
